
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftLTLEGTGEleftPLUSMINUSleftTIMESDIVIDErightUMINUSAND ASSIGN BOOL CHAR CHAR_CONST CIN COMMA COUT DEC DIVIDE DOUBLE ELSE ENDL EQ FLOAT FLOAT_CONST FOR GE GT ID IF INC INT INT_CONST LBRACE LE LPAREN LSHIFT LT MAIN MINUS NEQ OR PLUS RBRACE RETURN RPAREN RSHIFT SEMICOLON STRING_LITERAL TIMES WHILEprogram : global_itemsglobal_items : global_items global_item\n| global_itemglobal_item : function_def\n| stmtfunction_def : type_specifier MAIN LPAREN RPAREN blocktype_specifier : INT\n| FLOAT\n| DOUBLE\n| CHAR\n| BOOLblock : LBRACE stmt_list RBRACEstmt_list : stmt_list stmt\n| emptystmt : decl_stmt\n| expr_stmt\n| if_stmt\n| while_stmt\n| for_stmt\n| io_stmt\n| return_stmt\n| blockdecl_stmt : type_specifier init_decl SEMICOLON\n| type_specifier ID SEMICOLONinit_decl : ID ASSIGN expressionexpr_stmt : assignment SEMICOLONassignment : ID ASSIGN expressionif_stmt : IF LPAREN expression RPAREN stmt ELSE stmt\n| IF LPAREN expression RPAREN stmtwhile_stmt : WHILE LPAREN expression RPAREN stmtfor_stmt : FOR LPAREN for_init SEMICOLON for_cond SEMICOLON for_iter RPAREN stmtfor_init : decl_stmt\n| assignment\n| emptyfor_cond : expression\n| emptyfor_iter : expr_iter\n| emptyexpr_iter : ID INC\n| ID DEC\n| assignmentio_stmt : cout_stmt SEMICOLON\n| cin_stmt SEMICOLONcout_stmt : COUT insertion_listinsertion_list : LSHIFT insertion_itemsinsertion_items : insertion_items LSHIFT insertion_item\n| insertion_iteminsertion_item : expression\n| ENDLcin_stmt : CIN extraction_listextraction_list : RSHIFT extraction_itemsextraction_items : extraction_items RSHIFT extraction_target\n| extraction_targetextraction_target : IDreturn_stmt : RETURN expression SEMICOLON\n| RETURN SEMICOLONexpression : expression PLUS expression\n| expression MINUS expression\n| expression TIMES expression\n| expression DIVIDE expression\n| expression EQ expression\n| expression NEQ expression\n| expression LT expression\n| expression GT expression\n| expression LE expression\n| expression GE expression\n| expression AND expression\n| expression OR expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : INT_CONST\n| FLOAT_CONST\n| STRING_LITERAL\n| CHAR_CONSTexpression : IDempty :'
    
_lr_action_items = {'INT':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,39,40,41,43,51,52,58,59,69,84,85,95,96,113,114,115,121,123,129,132,],[15,15,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,15,-42,-43,-56,15,-14,-23,-24,-55,-12,-13,15,15,-6,-29,-30,15,-28,15,-31,]),'FLOAT':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,39,40,41,43,51,52,58,59,69,84,85,95,96,113,114,115,121,123,129,132,],[16,16,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,16,-42,-43,-56,16,-14,-23,-24,-55,-12,-13,16,16,-6,-29,-30,16,-28,16,-31,]),'DOUBLE':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,39,40,41,43,51,52,58,59,69,84,85,95,96,113,114,115,121,123,129,132,],[17,17,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,17,-42,-43,-56,17,-14,-23,-24,-55,-12,-13,17,17,-6,-29,-30,17,-28,17,-31,]),'CHAR':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,39,40,41,43,51,52,58,59,69,84,85,95,96,113,114,115,121,123,129,132,],[18,18,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,18,-42,-43,-56,18,-14,-23,-24,-55,-12,-13,18,18,-6,-29,-30,18,-28,18,-31,]),'BOOL':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,39,40,41,43,51,52,58,59,69,84,85,95,96,113,114,115,121,123,129,132,],[19,19,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,19,-42,-43,-56,19,-14,-23,-24,-55,-12,-13,19,19,-6,-29,-30,19,-28,19,-31,]),'IF':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,40,41,43,51,52,58,59,69,84,85,95,96,113,114,115,121,123,129,132,],[22,22,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,-42,-43,-56,22,-14,-23,-24,-55,-12,-13,22,22,-6,-29,-30,22,-28,22,-31,]),'WHILE':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,40,41,43,51,52,58,59,69,84,85,95,96,113,114,115,121,123,129,132,],[23,23,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,-42,-43,-56,23,-14,-23,-24,-55,-12,-13,23,23,-6,-29,-30,23,-28,23,-31,]),'FOR':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,40,41,43,51,52,58,59,69,84,85,95,96,113,114,115,121,123,129,132,],[24,24,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,-42,-43,-56,24,-14,-23,-24,-55,-12,-13,24,24,-6,-29,-30,24,-28,24,-31,]),'RETURN':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,40,41,43,51,52,58,59,69,84,85,95,96,113,114,115,121,123,129,132,],[27,27,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,-42,-43,-56,27,-14,-23,-24,-55,-12,-13,27,27,-6,-29,-30,27,-28,27,-31,]),'LBRACE':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,40,41,43,51,52,58,59,69,84,85,93,95,96,113,114,115,121,123,129,132,],[28,28,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,-42,-43,-56,28,-14,-23,-24,-55,-12,-13,28,28,28,-6,-29,-30,28,-28,28,-31,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,27,28,31,35,36,37,38,39,40,41,43,44,45,51,52,54,56,58,59,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,95,96,97,111,112,113,114,115,121,122,123,129,132,],[20,20,-3,-4,-5,34,-22,-15,-16,-17,-18,-19,-20,-21,-7,-8,-9,-10,-11,50,-76,-2,50,-26,50,50,20,-42,-43,-56,50,50,20,-14,50,92,-23,-24,50,34,-55,50,50,50,50,50,50,50,50,50,50,50,50,-12,-13,20,20,50,50,92,-6,-29,-30,20,127,-28,20,-31,]),'COUT':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,40,41,43,51,52,58,59,69,84,85,95,96,113,114,115,121,123,129,132,],[29,29,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,-42,-43,-56,29,-14,-23,-24,-55,-12,-13,29,29,-6,-29,-30,29,-28,29,-31,]),'CIN':([0,2,3,4,5,7,8,9,10,11,12,13,14,28,31,36,40,41,43,51,52,58,59,69,84,85,95,96,113,114,115,121,123,129,132,],[30,30,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-76,-2,-26,-42,-43,-56,30,-14,-23,-24,-55,-12,-13,30,30,-6,-29,-30,30,-28,30,-31,]),'$end':([1,2,3,4,5,7,8,9,10,11,12,13,14,31,36,40,41,43,58,59,69,84,113,114,115,123,132,],[0,-1,-3,-4,-5,-22,-15,-16,-17,-18,-19,-20,-21,-2,-26,-42,-43,-56,-23,-24,-55,-12,-6,-29,-30,-28,-31,]),'MAIN':([6,15,16,17,18,19,],[32,-7,-8,-9,-10,-11,]),'RBRACE':([7,8,9,10,11,12,13,14,28,36,40,41,43,51,52,58,59,69,84,85,114,115,123,132,],[-22,-15,-16,-17,-18,-19,-20,-21,-76,-26,-42,-43,-56,84,-14,-23,-24,-55,-12,-13,-29,-30,-28,-31,]),'ELSE':([7,8,9,10,11,12,13,14,36,40,41,43,58,59,69,84,114,115,123,132,],[-22,-15,-16,-17,-18,-19,-20,-21,-26,-42,-43,-56,-23,-24,-55,-12,121,-30,-28,-31,]),'ASSIGN':([20,34,127,],[35,60,35,]),'SEMICOLON':([21,25,26,27,33,34,39,42,46,47,48,49,50,53,55,58,59,61,64,65,66,67,82,86,87,88,89,90,91,92,94,97,98,99,100,101,102,103,104,105,106,107,108,109,110,116,117,118,119,120,],[36,40,41,43,58,59,-76,69,-71,-72,-73,-74,-75,-44,-50,-23,-24,-27,97,-32,-33,-34,-69,-45,-47,-48,-49,-51,-53,-54,-25,-76,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,122,-35,-36,-46,-52,]),'LPAREN':([22,23,24,27,32,35,37,38,44,45,54,60,70,71,72,73,74,75,76,77,78,79,80,81,97,111,],[37,38,39,45,57,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'MINUS':([27,35,37,38,42,44,45,46,47,48,49,50,54,60,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,88,94,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,117,],[44,44,44,44,71,44,44,-71,-72,-73,-74,-75,44,44,71,71,71,44,44,44,44,44,44,44,44,44,44,44,44,-69,71,71,71,44,-57,-58,-59,-60,71,71,71,71,71,71,71,71,-70,44,71,]),'INT_CONST':([27,35,37,38,44,45,54,60,70,71,72,73,74,75,76,77,78,79,80,81,97,111,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'FLOAT_CONST':([27,35,37,38,44,45,54,60,70,71,72,73,74,75,76,77,78,79,80,81,97,111,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'STRING_LITERAL':([27,35,37,38,44,45,54,60,70,71,72,73,74,75,76,77,78,79,80,81,97,111,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'CHAR_CONST':([27,35,37,38,44,45,54,60,70,71,72,73,74,75,76,77,78,79,80,81,97,111,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'LSHIFT':([29,46,47,48,49,50,82,86,87,88,89,98,99,100,101,102,103,104,105,106,107,108,109,110,119,],[54,-71,-72,-73,-74,-75,-69,111,-47,-48,-49,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-46,]),'RSHIFT':([30,90,91,92,120,],[56,112,-53,-54,-52,]),'PLUS':([42,46,47,48,49,50,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,117,],[70,-71,-72,-73,-74,-75,70,70,70,-69,70,70,70,-57,-58,-59,-60,70,70,70,70,70,70,70,70,-70,70,]),'TIMES':([42,46,47,48,49,50,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,117,],[72,-71,-72,-73,-74,-75,72,72,72,-69,72,72,72,72,72,-59,-60,72,72,72,72,72,72,72,72,-70,72,]),'DIVIDE':([42,46,47,48,49,50,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,117,],[73,-71,-72,-73,-74,-75,73,73,73,-69,73,73,73,73,73,-59,-60,73,73,73,73,73,73,73,73,-70,73,]),'EQ':([42,46,47,48,49,50,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,117,],[74,-71,-72,-73,-74,-75,74,74,74,-69,74,74,74,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,74,74,-70,74,]),'NEQ':([42,46,47,48,49,50,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,117,],[75,-71,-72,-73,-74,-75,75,75,75,-69,75,75,75,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,75,75,-70,75,]),'LT':([42,46,47,48,49,50,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,117,],[76,-71,-72,-73,-74,-75,76,76,76,-69,76,76,76,-57,-58,-59,-60,76,76,-63,-64,-65,-66,76,76,-70,76,]),'GT':([42,46,47,48,49,50,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,117,],[77,-71,-72,-73,-74,-75,77,77,77,-69,77,77,77,-57,-58,-59,-60,77,77,-63,-64,-65,-66,77,77,-70,77,]),'LE':([42,46,47,48,49,50,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,117,],[78,-71,-72,-73,-74,-75,78,78,78,-69,78,78,78,-57,-58,-59,-60,78,78,-63,-64,-65,-66,78,78,-70,78,]),'GE':([42,46,47,48,49,50,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,117,],[79,-71,-72,-73,-74,-75,79,79,79,-69,79,79,79,-57,-58,-59,-60,79,79,-63,-64,-65,-66,79,79,-70,79,]),'AND':([42,46,47,48,49,50,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,117,],[80,-71,-72,-73,-74,-75,80,80,80,-69,80,80,80,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,80,-70,80,]),'OR':([42,46,47,48,49,50,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,110,117,],[81,-71,-72,-73,-74,-75,81,81,81,-69,81,81,81,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,81,]),'RPAREN':([46,47,48,49,50,57,61,62,63,82,83,98,99,100,101,102,103,104,105,106,107,108,109,110,122,124,125,126,128,130,131,],[-71,-72,-73,-74,-75,93,-27,95,96,-69,110,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-70,-76,129,-37,-38,-41,-39,-40,]),'ENDL':([54,111,],[89,89,]),'INC':([127,],[130,]),'DEC':([127,],[131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_items':([0,],[2,]),'global_item':([0,2,],[3,31,]),'function_def':([0,2,],[4,4,]),'stmt':([0,2,51,95,96,121,129,],[5,5,85,114,115,123,132,]),'type_specifier':([0,2,39,51,95,96,121,129,],[6,6,68,68,68,68,68,68,]),'block':([0,2,51,93,95,96,121,129,],[7,7,7,113,7,7,7,7,]),'decl_stmt':([0,2,39,51,95,96,121,129,],[8,8,65,8,8,8,8,8,]),'expr_stmt':([0,2,51,95,96,121,129,],[9,9,9,9,9,9,9,]),'if_stmt':([0,2,51,95,96,121,129,],[10,10,10,10,10,10,10,]),'while_stmt':([0,2,51,95,96,121,129,],[11,11,11,11,11,11,11,]),'for_stmt':([0,2,51,95,96,121,129,],[12,12,12,12,12,12,12,]),'io_stmt':([0,2,51,95,96,121,129,],[13,13,13,13,13,13,13,]),'return_stmt':([0,2,51,95,96,121,129,],[14,14,14,14,14,14,14,]),'assignment':([0,2,39,51,95,96,121,122,129,],[21,21,66,21,21,21,21,128,21,]),'cout_stmt':([0,2,51,95,96,121,129,],[25,25,25,25,25,25,25,]),'cin_stmt':([0,2,51,95,96,121,129,],[26,26,26,26,26,26,26,]),'init_decl':([6,68,],[33,33,]),'expression':([27,35,37,38,44,45,54,60,70,71,72,73,74,75,76,77,78,79,80,81,97,111,],[42,61,62,63,82,83,88,94,98,99,100,101,102,103,104,105,106,107,108,109,117,88,]),'stmt_list':([28,],[51,]),'empty':([28,39,97,122,],[52,67,118,126,]),'insertion_list':([29,],[53,]),'extraction_list':([30,],[55,]),'for_init':([39,],[64,]),'insertion_items':([54,],[86,]),'insertion_item':([54,111,],[87,119,]),'extraction_items':([56,],[90,]),'extraction_target':([56,112,],[91,120,]),'for_cond':([97,],[116,]),'for_iter':([122,],[124,]),'expr_iter':([122,],[125,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_items','program',1,'p_program','parser.py',25),
  ('global_items -> global_items global_item','global_items',2,'p_global_items','parser.py',38),
  ('global_items -> global_item','global_items',1,'p_global_items','parser.py',39),
  ('global_item -> function_def','global_item',1,'p_global_item','parser.py',46),
  ('global_item -> stmt','global_item',1,'p_global_item','parser.py',47),
  ('function_def -> type_specifier MAIN LPAREN RPAREN block','function_def',5,'p_function_def','parser.py',51),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',56),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',57),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','parser.py',58),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',59),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','parser.py',60),
  ('block -> LBRACE stmt_list RBRACE','block',3,'p_block','parser.py',64),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','parser.py',68),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',69),
  ('stmt -> decl_stmt','stmt',1,'p_stmt','parser.py',79),
  ('stmt -> expr_stmt','stmt',1,'p_stmt','parser.py',80),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser.py',81),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser.py',82),
  ('stmt -> for_stmt','stmt',1,'p_stmt','parser.py',83),
  ('stmt -> io_stmt','stmt',1,'p_stmt','parser.py',84),
  ('stmt -> return_stmt','stmt',1,'p_stmt','parser.py',85),
  ('stmt -> block','stmt',1,'p_stmt','parser.py',86),
  ('decl_stmt -> type_specifier init_decl SEMICOLON','decl_stmt',3,'p_decl_stmt','parser.py',90),
  ('decl_stmt -> type_specifier ID SEMICOLON','decl_stmt',3,'p_decl_stmt','parser.py',91),
  ('init_decl -> ID ASSIGN expression','init_decl',3,'p_init_decl','parser.py',102),
  ('expr_stmt -> assignment SEMICOLON','expr_stmt',2,'p_expr_stmt','parser.py',106),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','parser.py',110),
  ('if_stmt -> IF LPAREN expression RPAREN stmt ELSE stmt','if_stmt',7,'p_if_stmt','parser.py',114),
  ('if_stmt -> IF LPAREN expression RPAREN stmt','if_stmt',5,'p_if_stmt','parser.py',115),
  ('while_stmt -> WHILE LPAREN expression RPAREN stmt','while_stmt',5,'p_while_stmt','parser.py',122),
  ('for_stmt -> FOR LPAREN for_init SEMICOLON for_cond SEMICOLON for_iter RPAREN stmt','for_stmt',9,'p_for_stmt','parser.py',126),
  ('for_init -> decl_stmt','for_init',1,'p_for_init','parser.py',134),
  ('for_init -> assignment','for_init',1,'p_for_init','parser.py',135),
  ('for_init -> empty','for_init',1,'p_for_init','parser.py',136),
  ('for_cond -> expression','for_cond',1,'p_for_cond','parser.py',140),
  ('for_cond -> empty','for_cond',1,'p_for_cond','parser.py',141),
  ('for_iter -> expr_iter','for_iter',1,'p_for_iter','parser.py',145),
  ('for_iter -> empty','for_iter',1,'p_for_iter','parser.py',146),
  ('expr_iter -> ID INC','expr_iter',2,'p_expr_iter','parser.py',150),
  ('expr_iter -> ID DEC','expr_iter',2,'p_expr_iter','parser.py',151),
  ('expr_iter -> assignment','expr_iter',1,'p_expr_iter','parser.py',152),
  ('io_stmt -> cout_stmt SEMICOLON','io_stmt',2,'p_io_stmt','parser.py',159),
  ('io_stmt -> cin_stmt SEMICOLON','io_stmt',2,'p_io_stmt','parser.py',160),
  ('cout_stmt -> COUT insertion_list','cout_stmt',2,'p_cout_stmt','parser.py',164),
  ('insertion_list -> LSHIFT insertion_items','insertion_list',2,'p_insertion_list','parser.py',169),
  ('insertion_items -> insertion_items LSHIFT insertion_item','insertion_items',3,'p_insertion_items','parser.py',173),
  ('insertion_items -> insertion_item','insertion_items',1,'p_insertion_items','parser.py',174),
  ('insertion_item -> expression','insertion_item',1,'p_insertion_item','parser.py',181),
  ('insertion_item -> ENDL','insertion_item',1,'p_insertion_item','parser.py',182),
  ('cin_stmt -> CIN extraction_list','cin_stmt',2,'p_cin_stmt','parser.py',189),
  ('extraction_list -> RSHIFT extraction_items','extraction_list',2,'p_extraction_list','parser.py',193),
  ('extraction_items -> extraction_items RSHIFT extraction_target','extraction_items',3,'p_extraction_items','parser.py',197),
  ('extraction_items -> extraction_target','extraction_items',1,'p_extraction_items','parser.py',198),
  ('extraction_target -> ID','extraction_target',1,'p_extraction_target','parser.py',205),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',209),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','parser.py',210),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',217),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',218),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',219),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',220),
  ('expression -> expression EQ expression','expression',3,'p_expression_binop','parser.py',221),
  ('expression -> expression NEQ expression','expression',3,'p_expression_binop','parser.py',222),
  ('expression -> expression LT expression','expression',3,'p_expression_binop','parser.py',223),
  ('expression -> expression GT expression','expression',3,'p_expression_binop','parser.py',224),
  ('expression -> expression LE expression','expression',3,'p_expression_binop','parser.py',225),
  ('expression -> expression GE expression','expression',3,'p_expression_binop','parser.py',226),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',227),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',228),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser.py',232),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',236),
  ('expression -> INT_CONST','expression',1,'p_expression_literal','parser.py',240),
  ('expression -> FLOAT_CONST','expression',1,'p_expression_literal','parser.py',241),
  ('expression -> STRING_LITERAL','expression',1,'p_expression_literal','parser.py',242),
  ('expression -> CHAR_CONST','expression',1,'p_expression_literal','parser.py',243),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',251),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',255),
]
